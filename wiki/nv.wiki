#summary Networked Variable api
#labels Phase-Implementation

=Networked Variable (nv)=
nsdci/dcicommon/nv.c

==Introduction==
The Networked Variable api (nv) is used to stream key-value updates to remote clients. It is an in-memory array on multiple servers.  The array is networked, so array manipulation on the origin server is reflected on the clients. The array has the option to be flushed to disk for persistent storage across restarts.  Clients will receive the entire array from the origin server on startup.

Addition Reading: [broadcaster], [receiver].

==TCL API==

==Configuration==
====Server====
Create the nv array, create the nv server, specify which arrays the nv server can serve, then configure the clients:
{{{
    ns_section "ns/server/$server/module/dci/nv"
        ns_param debug 1

    ns_section "ns/server/$server/module/dci/nv/arrays"
        ns_param nv nv

    ns_section "ns/server/$server/module/dci/nv/array/nv"
        ns_param persist 1

    ns_section "ns/server/$server/module/dci/nv/servers"
        ns_param $nsVerverName $nvServerName

    ns_section "ns/server/$server/module/dci/nv/server/$nvServerName"
        ns_param login "nv"

    ns_section "ns/server/$server/module/dci/nv/server/$nvServerName/arrays" 
        ns_param nv nv

    ns_section "ns/server/$server/module/dci/nv/server/$nvServerName/clients"
        ns_param $nvClientName $clientAddress:$clientReceiverPort
}}}

==Usage==

==Best Practices==
Since clients receive the entire array on startup. Attention should be paid to the number of nv clients an origin server has, the size of those arrays, and how many arrays each client has connected.  The combination of number and size can decrease performance on a cold start.

Try to keep nv arrays bounded. Unbounded arrays will grow over time and cause the performance issues described above.
