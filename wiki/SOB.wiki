#summary Networked Small Object Broker (nsob)
#labels Phase-Implementation

=Networked SOB (nsob)=
nsdci/dcicommon/sob.c

==Introduction==
The Networked Small Object Broker (nsob) is used to broker data between servers.  You must set up a "SOB client" to send and request data, and a "SOB server" to broker data. The api is only exposed when properly configured. See the "Configuration" section for more information.

Additional Reading: [RPC], [NCF]

==TCL API==

===nsob.put===
Used to put data from a client to the broker. If sendflush is enabled (default), a [NCF] message will be sent to all clients.

*nsob.put * _server key value_

|| *Argument* || *Description* ||
|| _server_ || String. The name of the sob server. ||
|| _key_ || String. The file name or key of the data. ||
|| _value_ || String. The data to be put. ||
 

|| *Result* || *Description* ||
|| {{{NULL}}} || Success ||
|| {{{TCL_ERROR}}} || Failure. An error occurred. See the server log for more information. ||

{{{
--------------------------------------------------------------------------------
}}}

===nsob.append===
Used to append data on the broker. If sendflush is enabled (default), a [NCF] message will be sent to all clients.

*nsob.append* _server key value_

|| *Argument* || *Description* ||
|| _server_ || String. The name of the sob server. ||
|| _key_ || String. The file name or key of the data. ||
|| _value_ || String. The data to be appended. ||
 

|| *Result* || *Description* ||
|| {{{NULL}}} || Success ||
|| {{{TCL_ERROR}}} || Failure. An error occurred. See the server log for more information. ||

{{{
--------------------------------------------------------------------------------
}}}

===nsob.get ===
Used to fetch data from the broker. If caching is enabled, the API will fetch from cache if exists, and make a cache entry if it does not.

*nsob.get* _server key_

|| *Argument* || *Description* ||
|| _server_ || String. The name of the sob server. ||
|| _key_ || String. The file name or key of the data. ||


|| *Result* || *Description* ||
|| {{{STRING}}} || Success. The contents of the file. ||
|| {{{NULL}}} || Success. The communication was successful, but there was no such key. ||
|| {{{TCL_ERROR}}} || Failure. An error occurred. See the server log for more information. ||

{{{
--------------------------------------------------------------------------------
}}}

===nsob.delete===
Used to remove data from the broker. If sendflush is enabled (default), a [NCF] message will be sent to all clients.

*nsob.delete* _server key_

|| *Argument* || *Description* ||
|| _server_ || String. The name of the sob server. ||
|| _key_ || String. The file name or key of the data. ||
 

|| *Result* || *Description* ||
|| {{{NULL}}} || Success. The file has been deleted. ||
|| {{{TCL_ERROR}}} || Failure. An error occurred. See the server log for more information. ||

{{{
--------------------------------------------------------------------------------
}}}

===nsob.names===
Used to list the names of the configured SOBs.  Both clients and servers are listed.

*nsob.names*

|| *Result* || *Description* ||
|| {{{String}}} || Success. The names of the configured SOBs in TCL_LIST format. ||
|| {{{TCL_ERROR}}} || Failure. An error occurred. See the server log for more information. ||


{{{
--------------------------------------------------------------------------------
}}}

===nsob.debug===
Used to toggle debug mode. Debug mode adds log messages for many nsob commands.

*nsob.debug* _?boolean?_

|| *Argument* || *Description* ||
|| _?boolean?_ || Boolean. Optional. Specifies whether or not debugging is enabled. ||


|| *Result* || *Description* ||
|| {{{1}}} || Success. Returned if boolean was specified. ||
|| {{{boolean}}} || Success. If a boolean was not specified, then the current debug value is returned. ||

{{{
--------------------------------------------------------------------------------
}}}

===nsob.copy===
Used to copy the contents of a local file to the borker.  If sendflush is enabled (default), a [NCF] message will be sent to all clients.

*nsob.copy* _localFile server key_

|| *Argument* || *Description* ||
|| _localFile_ || String. The complete file path to the file. ||
|| _server_ || String. The name of the sob server. ||
|| _key_ || String. The file name or key of the data. ||


|| *Result* || *Description* ||
|| {{{NULL}}} || Success. The file was copied to the server. ||
|| {{{TCL_ERROR}}} || Failure. An error occurred. See the server log for more information. ||


==Configuration==
The bundled configuration has a single AOLserver instance configured to broker many SOBs.  You could easily break out each SOB to its own AOLserver instance.  Below is a simple configuration that creates a SOB service called "sob":

===Server:===
{{{
    ns_section "ns/server/$server/modules"
        ns_param nssock nssock.so
        ns_param dci dci.so

    ns_section "ns/server/$server/module/nssock"
        ns_param hostname $hostName
        ns_param address $address
        ns_param port $httpPort

    ns_section "ns/server/$server/module/dci/sob"
        ns_param debug 1
 
    ns_section "ns/server/$server/module/dci/sob/servers"
        ns_param sob sob
 
    ns_section "ns/server/$server/module/dci/rpc/server/nsobc:sob"
        ns_param http 1

    ns_section "ns/server/$server/module/dci/sob/server/sob"
        ns_param root $sobRoot
        ns_param mkdirs 1
        ns_param rename 1
        ns_param statsdetail 1

    ns_section "ns/server/$server/module/dci/sob/server/sob/clients"
        # This section is required but has no params.
}}}

===Client:===
{{{
    ns_section "ns/server/$server/modules"
        ns_param dci dci.so

    ns_section "ns/server/$server/module/dci/sob"
        ns_param debug 1

    ns_section "ns/server/$server/module/dci/sob/clients"
        ns_param sob sob

    ns_section "ns/server/$server/module/dci/sob/client/sob"
        ns_param timeout 1

    ns_section "ns/server/$server/module/dci/rpc"
        ns_param debug 1
        ns_param address $address
        ns_param port $rpcPort

    ns_section "ns/server/$server/module/dci/rpc/client/nsobc:sob"
        ns_param address $sobHostAddress
        ns_param port $sobHostHttpPort 
        ns_param httpkeepalive true
        ns_param httpnumconnections 1
}}}

==Usage==
Any client can "put" data on the broker. The "put" command requires "server, key, and value" as arguments. Use the AOLserver Control Port to test the commands:

{{{
    [neon:/usr/local/aolserver] Michael% telnet 127.0.0.1 8900
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    login: 
    Password: 
 
    Welcome to tool running at /usr/local/aolserver/bin/nsd (pid 24173)
    AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
    CVS Tag: $Name:  $
    tool:nscp 1> nsob.put sob mySobFile "my sob data"
 
    tool:nscp 2> exit
 
    Goodbye!
    Connection closed by foreign host.
    [neon:/usr/local/aolserver] Michael% 
}}}

Any client can "get" data from the broker:

{{{
    [neon:/usr/local/aolserver] Michael% telnet 127.0.0.1 9900
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    login: 
    Password: 

    Welcome to frontend running at /usr/local/aolserver/bin/nsd (pid 24171)
    AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
    CVS Tag: $Name:  $
    frontend:nscp 1> nsob.get sob mySobFile
    my sob data
 
    frontend:nscp 2> exit
 
    Goodbye!
    Connection closed by foreign host.
    [neon:/usr/local/aolserver] Michael%
}}}

==Caching and Network Cache Flush==
To optimize performance, nsob has the ability to cache at both the server and client. With caching enabled (default), the initial client request first looks into its own cache. If no entry is found it will make a call to the server.  If the server has caching enabled (default), it will first look in its cache.  If no entry is found, it will read from disk, make a cache entry, and return the data. The client API will make a cache entry and return the data.  

Network Cache Flush ([NCF]) is another service availble in nsdci.  With the SOBs configured to send cache flush messages (default), the remote client cache will be flushed when a sob entry is addded or changed. Note: You must configure [NCF] on the AOLserver instance hosting the SOBs in order for the SOBs to send cache flush messages.

There are significant performance gains from caching. Consider a fetch to "file.xml" which is 8KB:

{{{
    [neon:/tmp/sob] Michael% telnet 127.0.0.1 8900
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    login: 
    Password: 
 
    Welcome to tool running at /usr/local/aolserver/bin/nsd (pid 24410)
    AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
    CVS Tag: $Name:  $
    tool:nscp 1> time {nsob.get sob file.xml}
    555 microseconds per iteration
    tool:nscp 2> time {nsob.get sob file.xml} 100
    79.08 microseconds per iteration
    tool:nscp 3> 
}}}

If dubugging is turned on, you will see the following log entries in the tool.server.log file:
{{{
    [04/Jan/2007:20:47:47][24410.25212928][-nscp:3-] Notice: sob: sob: get file.xml - ok
    [04/Jan/2007:20:48:02][24410.25212928][-nscp:3-] Notice: sob: sob: get file.xml - ok (cached)
}}}

The first entry shows that the data was fetched from the server, the second shows the data was retrieved from cache.   Similar notices can be seen on the server in the sob.server.log file:

{{{
    [04/Jan/2007:20:48:02][25809.25191424][-conn:0-] Notice: read: file.xml
}}}
or
{{{
    [04/Jan/2007:20:48:02][25809.25191424][-conn:0-] Notice: read: file.xml (cached)
}}}

==Best Practices==
Caching should be used where possible to optimize performance. The AOLserver Stats interface has insight to Cache-hit-rate information and should be used to measure the performance of the sob cache.  A high cache-hit-rate is preferred.

You might find that flowing content one way per server gives better performance.  For example, one server brokering data from the tool server to the frontned, and a second from the frontend to the tool server.  This could perform better than one server doing both.

When connecting over dcirpc, the size of each sob file combined with the number of clients and number of sob calls on a page can decrease performance and/or cause socket drops and timeouts. The AOLserver stats interface can be used to measure RPC socket performance and should be monitored regularly.