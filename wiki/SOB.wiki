The Networked SOB (nsob) API

= Introduction =

The Small Object Broker, or SOB, is used to send content from a tool and/or frontend server to a middle-tier broker.  The client servers (tool and frontend) send content to, and request content from, the broker through the SOB API.  The following article will discuss configuration, the API, caching, and best practices.

= Configuration =

The bundled set up has a single AOLserver instance called "sob" brokering many different SOB servers.  You could easily break out each SOB server to its own AOLserver instance, but for simplicity we have set up a single instance, serving many SOBs. See the sobServer.tcl and sobClient.tcl for configuration information. Below is a sample config:

*Server Configuration:*

{{{
 ns_section "ns/server/${server}/module/dci/sob/sobs"
     ns_param sob 0

 ns_section "ns/server/${server}/module/dci/sob/servers"
     ns_param sob sob

 ns_section "ns/server/${server}/module/dci/sob/server/sob"
     ns_param root $sobRoot
     ns_param sendflush 1
     ns_param readonly 0
     ns_param mkdirs 1
     ns_param debug 1
     ns_param nocache 0

 ns_section "ns/server/${server}/module/dci/sob/server/sob/clients"
     ns_param tool ${toolAddress}:${toolRpcPort}
     ns_param frontend ${frontendAddress}:$(frontendRpcPort}
}}}

*Client Configuration:*

{{{
 ns_section "ns/server/${server}/module/dci/sob/sobs"
     ns_param sob 0

 ns_section "ns/server/${server}/module/dci/sob/clients"
     ns_param sob sob

 ns_section "ns/server/${serverName}/module/dci/rpc/client/nsobc:sob"
     ns_param address $sobAddress
     ns_param port $sobHttpPort
     ns_param httpkeepalive true
     ns_param httpnumconnections 1
     ns_param debug 1

 ns_section "ns/server/${server}/module/dci/sob/client/sob"
     ns_param cachesize 1000000
     ns_param debug 1
}}}

= Usage =

From any "sob" client, we can "put" data on the broker. The "put" command requires "server, key, and value" as arguments:

{{{
 [neon:/usr/local/aolserver] Michael% telnet 127.0.0.1 8900
 Trying 127.0.0.1...
 Connected to localhost.
 Escape character is '^]'.
 login: 
 Password: 
 
 Welcome to tool running at /usr/local/aolserver/bin/nsd (pid 24173)
 AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
 CVS Tag: $Name:  $
 tool:nscp 1> nsob.put sob mySobFile "my sob data"
 
 tool:nscp 2>
}}}

We can also "get" the data from any "sob" client:

{{{
 tool:nscp 2> nsob.get sob mySobFile
 my sob data
 tool:nscp 3> exit
 
 Goodbye!
 Connection closed by foreign host.
 [neon:/usr/local/aolserver] Michael% telnet 127.0.0.1 9900
 Trying 127.0.0.1...
 Connected to localhost.
 Escape character is '^]'.
 login: 
 Password: 

 Welcome to frontend running at /usr/local/aolserver/bin/nsd (pid 24171)
 AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
 CVS Tag: $Name:  $
 frontend:nscp 1> nsob.get sob mySobFile
 my sob data
 
 frontend:nscp 2> exit
 
 Goodbye!
 Connection closed by foreign host.
 [neon:/usr/local/aolserver] Michael%
}}}

= Caching and NCF =

To optimize performance, SOB has the ability to cache at both the server level and client level. With caching turned on the initial client request first looks into its own cache. If no entry is found it will make a call to the server.  If the server has caching turned on, it will first look in its cache.  If no entry is found, it will read from disk, make a cache entry, and return the data. The client API will make a cache entry and return the data.  

Network Cache Flush (NCF) is another service availble in nsdci.  With the SOBs configured to send cache flush messages, remote client cache will be flushed when the sob entry is changed using nsob.put.  See <article> for information on NCF.

Note: You must configure NCF on the SOB AOLserver instance in order for the SOBs to send NCFs.

= Best Practices =