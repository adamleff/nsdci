The Networked SOB (nsob) API

= Introduction =

The Small Object Broker, or SOB, is used to send content from a tool and/or frontend server to a middle-tier broker.  The client servers (tool and frontend) send content to, and request content from, the broker through the SOB API.  The following article will discuss configuration, usage and caching, the TCL API, and best practices.

= Configuration =

The bundled set up has a single AOLserver instance brokering many different SOB servers.  You could easily break out each SOB server to its own AOLserver instance. Below is a sample config:

*Server Configuration:*

{{{
    ns_section "ns/server/${server}/module/dci/sob/sobs"
        ns_param sob 0

    ns_section "ns/server/${server}/module/dci/sob/servers"
        ns_param sob sob

    ns_section "ns/server/${server}/module/dci/sob/server/sob"
        ns_param root $sobRoot
        ns_param sendflush 1
        ns_param readonly 0
        ns_param mkdirs 1
        ns_param debug 1
        ns_param nocache 0

    ns_section "ns/server/${server}/module/dci/sob/server/sob/clients"
        ns_param tool ${toolAddress}:${toolRpcPort}
        ns_param frontend ${frontendAddress}:$(frontendRpcPort}
}}}

*Client Configuration:*

{{{
    ns_section "ns/server/${server}/module/dci/sob/sobs"
        ns_param sob 0

    ns_section "ns/server/${server}/module/dci/sob/clients"
        ns_param sob sob

    ns_section "ns/server/${serverName}/module/dci/rpc/client/nsobc:sob"
        ns_param address $sobAddress
        ns_param port $sobHttpPort
        ns_param httpkeepalive true
        ns_param httpnumconnections 1
        ns_param debug 1

    ns_section "ns/server/${server}/module/dci/sob/client/sob"
        ns_param cachesize 1000000
        ns_param debug 1
}}}

= Usage =

Any "sob" client can "put" data on the broker. The "put" command requires "server, key, and value" as arguments. Use the AOLserver Control Port to test the commands:

{{{
    [neon:/usr/local/aolserver] Michael% telnet 127.0.0.1 8900
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    login: 
    Password: 
 
    Welcome to tool running at /usr/local/aolserver/bin/nsd (pid 24173)
    AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
    CVS Tag: $Name:  $
    tool:nscp 1> nsob.put sob mySobFile "my sob data"
 
    tool:nscp 2> exit
 
    Goodbye!
    Connection closed by foreign host.
    [neon:/usr/local/aolserver] Michael% 
}}}

We can also "get" the data from any "sob" client:

{{{
    [neon:/usr/local/aolserver] Michael% telnet 127.0.0.1 9900
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    login: 
    Password: 

    Welcome to frontend running at /usr/local/aolserver/bin/nsd (pid 24171)
    AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
    CVS Tag: $Name:  $
    frontend:nscp 1> nsob.get sob mySobFile
    my sob data
 
    frontend:nscp 2> exit
 
    Goodbye!
    Connection closed by foreign host.
    [neon:/usr/local/aolserver] Michael%
}}}

= Caching and Network Cache Flush =

To optimize performance, SOB has the ability to cache at both the server and client. With caching turned on the initial client request first looks into its own cache. If no entry is found it will make a call to the server.  If the server has caching turned on, it will first look in its cache.  If no entry is found, it will read from disk, make a cache entry, and return the data. The client API will make a cache entry and return the data.  

Network Cache Flush ([NCF]) is another service availble in nsdci.  With the SOBs configured to send cache flush messages, remote client cache will be flushed when a sob entry is addded or changed. Note: You must configure NCF on the AOLserver instance hosting the SOB servers in order for the SOBs to send NCFs.

There are significant performance gains from caching. Consider a fetch to "file.xml" which is 8KB:

{{{
    [neon:/tmp/sob] Michael% telnet 127.0.0.1 8900
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    login: 
    Password: 
 
    Welcome to tool running at /usr/local/aolserver/bin/nsd (pid 24410)
    AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
    CVS Tag: $Name:  $
    tool:nscp 1> time {nsob.get sob file.xml}
    555 microseconds per iteration
    tool:nscp 2> time {nsob.get sob file.xml} 100
    79.08 microseconds per iteration
    tool:nscp 3> 
}}}

If dubugging is turned on, you will see the following log entries in the tool.server.log file:
{{{
    [04/Jan/2007:20:47:47][24410.25212928][-nscp:3-] Notice: sob: sob: get file.xml - ok
    [04/Jan/2007:20:48:02][24410.25212928][-nscp:3-] Notice: sob: sob: get file.xml - ok (cached)
}}}

The first entry shows that the data was fetched from the server, the second shows the data was retrieved from cache.  For information on debugging See the nsob.debug command in the TCL API section of this article.

= TCL API =

*nsob.put:* Used to put data from a client to the broker. If sendflush is enabled, a ncf message will be sent to all clients.
{{{
     Example:
         nsob.put sob myFile "some data"

     Arguments:
         server - the name of the sob server
         key - the file name (key) of the data
         data - what to put in the file
 
     Return:
         void = success
         TCL_ERROR = error
}}}

*nsob.append:* Used to append data on the broker. If sendflush is enabled, a ncf message will be sent to all clients.
{{{
     Example:
         nsob.append sob myFile " MORE data"

     Arguments:
         server - the name of the sob server
         key - the file name (key) of the data
         data - what to append to the file
 
     Return:
         void = success
         TCL_ERROR = error
}}}

*nsob.get:* Used to fetch data from the broker. If caching is enabled, the API will fetch from cache if exists, and make a cache entry if it does not.
{{{
    Example:
        nsob.get sob myFile

    Arguments:
        server - the name of the sob server
        key - the file name (key) of the data

    Return:
        The contents of the file/key = success
        TCL_ERROR = error
}}}

*nsob.delete:* Used to remove data from the broker. If sendflush is enabled, a ncf message will be sent to all clients.
{{{
     Example:
         nsob.delete sob myFile

     Arguments:
         server - the name of the sob server
         key - the file name (key) of the data
 
     Return:
         void = success
         TCL_ERROR = error
}}}

*nsob.names:* Used to list the names of the sobs configured.  Both clients and servers are listed.
{{{
    Example:
        nsob.names

    Arguments:
        none

    Return:
        TCL_LIST of configured sobs = Success
        TCL_ERROR = error
}}}

*nsob.debug:* Used to toggle debug mode. Debug mode adds log messages for many nsob commands.
{{{
    Example:
        nsob.debug 1 (turns on debugging)
        nsob.debug 0 (turns off debugging)
        nsob.debug (returns debug value)

    Arguments:
        boolean: 1 = turn on, 0 = turn off
        none

    Return:
        boolean: 1 = success, 0 = fail
        when no argument is given the reuturn is the current setting
}}}

*nsob.copy:* Used to copy the contents of a local file to the borker.  If sendflush is enabled, a ncf message will be sent to all clients.
{{{
    Example:
        nsob.copy myLocalFile.txt sob mySobFile

    Arguments:
        file - the full path of the local file
        server - the sob server to be used
        key - the key/file name on the sob server

    Return:
        VOID = sucess
        TCL_ERROR = error
}}}

= Best Practices =

Special attention should be paid to the RPC stats.  The size of each sob file, combined with the number of clients and number of sob calls on a page can decrease performance and/or cause socket drops and timeouts. The AOLserver stats interface can be used to measure RPC socket performance and should be monitored regularly.

Caching should be used where possible to optimize performance. The AOLserver Stats interface has insight to Cache-hit-rate information and should be used to measure the performance of the sob cache.  A high cache-hit-rate is preferred.
