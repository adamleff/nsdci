=Cache API=

==Introduction==
The Cache API provides a mechanism to create size-based and time-based cache buckets.  The Network Cache Flush API ([NCF]) is used to send cache flush messages to client servers where these buckets have been created.  Together they provide a powerful, high performance cache-messaging service.  See the "Usage" and "Best Practices" sections for examples of how to effectively use the Cache API.

==TCL API==

===cache.createEntry===

*cache.createEntry* _cacheName key newVariable_

|| *Argument* || *Description* ||
|| _cacheName_ || String. The name of the cache bucket. ||
|| _key_ || String. The key name to be used. ||
|| _newVariable_ || Not Used ||


|| *Return* || * Description* ||
|| {{{String}}} || Success. The memory address of the entry was returned. ||
|| {{{TCL_ERROR}}} || Failure. An error occurred. See the server log for more information. ||

{{{
--------------------------------------------------------------------------------
}}}

===cache.createSized===

*cache.createSized* _cacheName size_

|| *Argument* || *Description* ||
|| _cacheName_ || String. The name of the cache bucket. ||
|| _size_ || Numeric. The size of the bucket in bytes. ||


|| *Return* || * Description* ||
|| {{{VOID}}} || Success. The cache bucket was created. ||

{{{
--------------------------------------------------------------------------------
}}}

===cache.createTimed===

*cache.createSized* _cacheName timeout_

|| *Argument* || *Description* ||
|| _cacheName_ || String. The name of the cache bucket. ||
|| _timeout_ || Integer. The TTL in minutes. ||


|| *Return* || * Description* ||
|| {{{VOID}}} || Success. The cache bucket was created. ||

{{{
--------------------------------------------------------------------------------
}}}

cache.deleteEntry cache.findEntry cache.flushEntry cache.getValue cache.lock cache.setValue cache.timedWait cache.unlock cache.unsetValue

==Usage==
The Cache API functions at a very low level and great care should be taken in its use.  The following AOLserver Control Port session is meant to give an overview only. Please see the "Best Practices" section on how to safly use the Cache API.
{{{
    [neon:local/aolserver/etc] Michael% telnet localhost 9900
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    login: 
    Password: 

    Welcome to frontend running at /usr/local/aolserver/bin/nsd (pid 628)
    AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
    CVS Tag: $Name:  $
    frontend:nscp 1> cache.createSized myCache 5000000          

    frontend:nscp 2> cache.lock myCache

    frontend:nscp 3> cache.createEntry myCache foo notUsed
    eid0x619088
    frontend:nscp 4> cache.setValue eid0x619088 "my value"

    frontend:nscp 5> cache.unlock myCache

    frontend:nscp 6> cache.findEntry myCache foo
    eid0x619088
    frontend:nscp 7> cache.getValue eid0x619088 returnVar
    1
    frontend:nscp 8> set returnVar
    my value
    frontend:nscp 9> exit

    Goodbye!
    Connection closed by foreign host.
    [neon:local/aolserver/etc] Michael%
}}}

==Best Practices==
Creating a cache entry and setting a value in that entry MUST be made as an atomic action. An exclusion lock is provided to ensure this.  If an error is thrown during this action, the cache would remain locked.  A catch should be used around these actions to ensure proper unwinding of the entry and the lock:
{{{
    if {[catch {
        cache.lock $cacheName
        set entry [cache.createEntry $cacheName $key notused]
        cache.setValue $entry $value
        cache.unlock $cacheName
    }]} {
        set errorString ${::errorInfo}
        catch {cache.deleteEntry $entry}
        catch {cache.unlock $cacheName}
        error $errorString
    }
}}}

Need to document the BPs for wait, broadcast, and signal
