The Networked Tally (nt) API

= Introduction =

Tally is used to keep track of votes and points. At some interval, those votes and points are "swept" by a callback into a runtime data structure. The developer writes the callback to do whatever the product needs - add to NV, append to SOB, etc. The tally is then reset. Runtime totals are pulled from the runtime datasource that was updated by the callback.

= Configuration =

*Tally Server (tool)*
{{{
    ns_section ns/server/${serverName}/module/dci/nt
        ns_param debug 1
 
    ns_section ns/server/${serverName}/module/dci/nt/server
        ns_param backupfile ntData.bak
 
    ns_section ns/server/${serverName}/module/dci/nt/server/clients
        ns_param frontend ${frontendIPAddress}:${frontendRPCPort}
}}}

*Client Server (frontend)*
{{{
    ns_section ns/server/${serverName}/module/dci/nt
        ns_param debug 1

    ns_section ns/server/${serverName}/module/dci/nt/client
       ns_param address ${address}
       ns_param port ${rpcPort}
       ns_param max 1000
}}}

= Usage =

To use tally, you have to have a callback loaded on AOLserver instance running the tally server.  Here is a sample tally callback proc.  Tally Callbacks must take "key count total" as arguments, in that order.  This callback *adds* the current counts and totals of a bucket to an *existing* [NV]:
{{{
    proc generic.processTallies {key count total} {
         if {[nv.cget nv ${key}.total oldTotal]} {
             incr total $oldTotal
         }
         if {[nv.cget nv ${key}.count oldCount]} {
             incr count $oldCount
         }
         nv.set nv ${key}.total $total
         nv.set nv ${key}.count $count
     }
}}}

Buckets are self initializing.  Using the AOLserver Control Port, send some votes to the tally server. 

{{{
    [neon:/usr/local/aolserver] Michael% telnet localhost 9900
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    login: 
    Password: 
 
    Welcome to frontend running at /usr/local/aolserver/bin/nsd (pid 24171)
    AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
    CVS Tag: $Name:  $
    frontend:nscp 1> nt.send myBucket bar 5
 
    frontend:nscp 2> nt.send myBucket dork 1
 
    frontend:nscp 3> exit
 
    Goodbye!
    Connection closed by foreign host.
    [neon:/usr/local/aolserver] Michael%
}}}

You can dump the tally bucket on the tool server to get a quick look at what will be processed:

{{{
    [neon:/usr/local/aolserver] Michael% telnet 127.0.0.1 8900
    Trying 127.0.0.1...
    Connected to localhost.
    Escape character is '^]'.
    login: 
    Password: 
 
    Welcome to tool running at /usr/local/aolserver/bin/nsd (pid 24173)
    AOLserver/4.5.0 (aolserver4_5) for osx built on Jan  4 2007 at 17:11:28
    CVS Tag: $Name:  $
    tool:nscp 1> nt.dump myBucket
    {dork 1 1} {bar 1 5}
}}}

To process a bucket:

{{{
    tool:nscp 2> nt.get myBucket generic.processTallies
    1
}}}

Notice that the runtime data structure has been updated and the tally reset. In this example, [NV] has been used as the runtime data structure.

{{{
    tool:nscp 3> nv.dump nv
    bar.count 1 dork.total 1 bar.total 5 dork.count 1
 
    tool:nscp 4> nt.dump myBucket

    tool:nscp 5> exit
}}}

You can use the ns schedule API to schedule the sweep as needed.

= Tcl API =

== nt.debug (client, server) ==

Used to retrieve the current debug value, or to set a new debug value.

=== Prototype ===

*nt.debug* _?boolean?_

=== Arguments ===

|| *Argument* || *Description* ||
|| _?boolean?_ || Boolean. Optional. Specifies whether or not debugging is enabled. ||

=== Results ===

|| *Result* || *Description* ||
|| {{{1}}} || Success. Returned if a boolean was specified. ||
|| {{{BOOLEAN}}} || Success. If a boolean was not specified, then the current debug value is returned. ||

=== Examples ===

{{{
nt.debug
nt.debug false
}}}

{{{
--------------------------------------------------------------------------------
}}}

== nt.send (client)==

Used to set key/value pairs for a given bucket name.

=== Prototype ===

*nt.send* _bucket_ _key_ _value_ 

=== Arguments ===

|| *Argument* || *Description* ||
|| _bucket_ || String. Name of the tally bucket. ||
|| _key_ || String. Name of the key to set in the specified bucket. ||
|| _value_ || Integer. The count to set for the specified key, in the specified bucket. ||


=== Results ===

|| *Result* || *Description* ||
|| {{{NULL}}} || Success. The result was successfully written to the nt server. Buckets are created and initialized on the fly as needed. ||
|| {{{TCL_ERROR}}} || Failure. An error occurred. See the server log for more information. ||


=== Examples ===

{{{
nt.send clicks index 1
nt.send clicks photos.html 10
}}}

{{{
--------------------------------------------------------------------------------
}}}

== nt.dump (server) ==

Used to dump the contents of a bucket. This does not reset the bucket.

=== Prototype ===

*nt.dump* _?boolean?_ 

=== Arguments ===

=== Results ===

{{{
--------------------------------------------------------------------------------
}}}

*nt.exists* _bucket_


*nt.dump:* Used to dump the contents of a bucket. This does not reset the bucket.

*nt.exists:* Used to test the existence of a tally bucket

*nt.get:* Gets the current buckets contents and calls the specified callback for processing 

nt.read 

nt.buckets 

nt.debug 

nt.write 

nt.peek

nt.send

= Best Practices =



